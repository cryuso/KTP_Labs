/**
 * Этот класс представляет один шаг пути, сгенерированный алгоритмом поиска пути A*. 
 **/
public class Waypoint
{
    /** Местоположение путевой точки **/
    Location loc;

    /**
     * Предыдущая путевая точка на этом пути или <code>null</code>, 
     * если это цель поиска A*
     **/
    Waypoint prevWaypoint;

    /**
     * В этом поле хранится общая предыдущая стоимость перемещений от начальной точки 
     * до этой путевой точки через цепочку путевых точек. Это фактическая стоимость следования пути; 
     * она не включает никаких оценок.
     **/
    private float prevCost;

    /**
    *  В этом поле хранится оценка оставшейся стоимости перемещений от этой точки до конечной
     **/
    private float remainingCost;


    /**
     * Создаем новую путевую точку для указанного местоположения. При желании можно указать предыдущую путевую точку, 
     * поскольку ссылка может быть <code>null</code>, чтобы указать, 
     * что путевая точка является началом пути
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** Возвращаем местоположение путевой точки **/
    public Location getLocation()
    {
        return loc;
    }

    /**
     * Возвращаем предыдущую путевую точку пути или <code>null</code>, если эта точка - начало пути
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }

    /**
     * Этот мутатор позволяет установить предыдущую и оставшуюся стоимость в одном вызове метода. 
     * Эти значения будут установлены одновременно
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Возвращаем фактическую стоимость перемещения до этой точки из начального местоположения 
     * через ряд точек в этой цепочке
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Возвращаем оценку оставшейся стоимости перемещения от этой точки до конечной
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     * Возвращаем оценку общей стоимости для этой путевой точки. 
     * Это включает в себя фактическую стоимость перемещения к этой точке из начального местоположения, 
     * а также оценку оставшейся стоимости перемещений от этой точки до конечного местоположения
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}
